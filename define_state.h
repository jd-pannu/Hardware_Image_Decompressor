`ifndef DEFINE_STATE

// for top state - we have more states than needed
typedef enum logic [1:0] {
	S_IDLE,
	S_UART_RX,
	S_M1,
	S_M2
} top_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;


typedef enum logic [4:0] {
	S_IDLE_M1,
	S_WAIT_NEW_PIXEL_ROW,
	S_LEAD_IN_DELAY_1,
	S_LEAD_IN_DELAY_2,
	S_LEAD_IN_DELAY_3,
	S_LEAD_IN_DELAY_4,
	S_LEAD_IN_DELAY_5,
	S_LEAD_IN_DELAY_6,
	S_LEAD_IN_DELAY_7,
	S_LEAD_IN_DELAY_8,
	S_CM_0,
	S_CM_1,
	S_CM_TEST_STATE,
	S_CM_2,
	S_CM_3,
	S_CM_4,
	S_CM_5,
	S_CM_6,
	S_CM_7,
	S_LEAD_OUT_0,
	S_M1_DONE
} M1_SRAM_state_type;

typedef enum logic [6:0] {
	S_IDLE_M2,
	S_FETCH_S_0,
	S_FETCH_S_1,
	S_FETCH_S_2,
	S_FETCH_S_3,
	S_FETCH_S_4,
	S_COMPUTE_T_L0,
	S_COMPUTE_T_L1,
	S_COMPUTE_T_L2,
	S_COMPUTE_T_L3,
	S_COMPUTE_T_CC0,
	S_COMPUTE_T_CC1,
	S_COMPUTE_T_CC2,
	S_COMPUTE_T_CC3,
	S_COMPUTE_T_CC4,
	S_COMPUTE_T_CC5,
	S_COMPUTE_T_LO1,
	S_COMPUTE_S_L0,
	S_COMPUTE_S_L1,
	S_COMPUTE_S_L2,
	S_COMPUTE_S_L3,
	S_COMPUTE_S_CC0,
	S_COMPUTE_S_CC1,
	S_COMPUTE_S_CC2,
	S_COMPUTE_S_CC3,
	S_COMPUTE_S_CC4,
	S_COMPUTE_S_CC5,
	S_COMPUTE_S_LO1,
	S_M2_DONE
} M2_SRAM_state_type;

parameter 
   VIEW_AREA_LEFT = 160,
   VIEW_AREA_RIGHT = 480,
   VIEW_AREA_TOP = 120,
   VIEW_AREA_BOTTOM = 360;

`define DEFINE_STATE 1
`endif
